#!/usr/bin/env python
import argparse
import shlex
import sys
import subprocess
import os
import re

def repr_git_info(git_info):
    output = '''\
  Local: {local}
  Remote: {remote}\n'''
    if git_info.get('ahead'):
        output += '''\
  Ahead: {ahead} commits\n'''
    if git_info.get('behind'):
        output += '''\
  Behind: {behind} commits\n'''
    return output.format(**git_info)


def err_out(error, exit_status=1, no_exit=False):
    sys.stdout.write("{0}\n".format(error.rstrip()))
    if no_exit:
        return 0
    sys.exit(exit_status)


def parse_git_output(output, path, check_behind_commits=False):
    status_map = {
        re.compile('^##$'): 'branch',
        re.compile('^\?\?$'): 'untracked',
        re.compile('^\!\!$'): 'ignored',
        re.compile('^UU$'): 'unmerged, both modified',
        re.compile('^AA$'): 'unmerged, both added',
        re.compile('^DU$'): 'unmerged, deleted by us',
        re.compile('^UA$'): 'unmerged, added  upstream',
        re.compile('^UD$'): 'unmerged, deleted upstream',
        re.compile('^AU$'): 'unmerged, added by us',
        re.compile('^DD$'): 'unmerged, both deleted',
        re.compile('^[ MARC]D$'): 'deleted in work tree',
        re.compile('^[ MARC]M$'): 'work tree changed since index',
        re.compile('^[MARC] $'): 'index and work tree matches',
        re.compile('^C[ MD]$'): 'copied in index',
        re.compile('^R[ MD]$'): 'renamed in index',
        re.compile('^D[ M]$'): 'Deleted from index',
        re.compile('^A[ MD]$'): 'added to index',
        re.compile('^M[ MD]$'): 'updated in index',
        re.compile('^ [MD]$'): 'not updated',
    }
    matches, git_info = {}, {}
    lines = output.strip().split('\n')
    branch_regex = re.compile('(?P<local>[\w/-]+)\.\.\.(?P<remote>[\w/-]+)')
    tracking_regex = re.compile('\[ahead (?P<ahead>[0-9]+)\]|\[behind (?P<behind>[0-9]+)\]')
    for line in lines:
        code, _, target = line.partition(' ')
        for status_code, detail in status_map.iteritems():
            match = status_code.match(code)
            if match:
                if detail == 'branch':
                    branch_match = branch_regex.search(target)
                    if branch_match:
                        git_info.update(branch_match.groupdict())
                    tracking_match = tracking_regex.search(target)
                    if tracking_match:
                        git_info.update(tracking_match.groupdict())
                    continue
                if detail == 'untracked' and matches.get(detail, None):
                    matches[detail] = "{0}\n\t{1}".format(target, matches[detail])
                else:
                    matches[detail] = target
    if not check_behind_commits:
        try:
            git_info.pop('behind')
        except KeyError:
            pass
    return git_info, matches

def is_git_repository(path):
    if os.path.exists(os.path.join(path, '.git')):
        return True
    else:
        return False

def main():
    try:
        argparser = argparse.ArgumentParser()
        argparser.add_argument('directory', help='Path to a git repository')
        argparser.add_argument('--behind', default=False, help='Check if repository is behind origin')
        args =argparser.parse_args()
        path = args.directory
        if not is_git_repository(path):
            # don't output anything, this clutters the screen
            # turns out `find` finds lots of dirs that aren't repositories
            sys.exit(128)

    except IndexError:
        err_out("No argument provided.\nUsage: {0} GIT_PATH".format(sys.argv[0]))

    try:
        os.chdir(path)
    except OSError:
        err_out("Couldn't cd to directory")

    arguments = {'args': shlex.split('git status -b --porcelain'),
                 'stdout': subprocess.PIPE,
                 'stderr': subprocess.PIPE}
    git_st_proc = subprocess.Popen(**arguments)
    git_output = git_st_proc.stdout.read()
    return_code = git_st_proc.wait()
    if return_code != 0:
        err_out("Git returned {0}\n".format(return_code) + git_st_proc.stderr.read())
    else:
        if git_output:
            git_info, matches = parse_git_output(git_output, path, check_behind_commits=args.behind)
            if not matches and any([git_info.get(x,None) for x in ('ahead', 'behind')]):
                sys.stdout.write('{0} is out of date:\n'.format(path))
                sys.stdout.write(repr_git_info(git_info))
            elif matches and git_info:
                sys.stdout.write('{0} is dirty:\n'.format(path))
                sys.stdout.write(repr_git_info(git_info))
                for detail, target in matches.iteritems():
                    sys.stdout.write('  {0}:\n\t{1}\n'.format(detail, target))


if __name__ == '__main__':
    main()
